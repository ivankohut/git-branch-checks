import com.appmattus.markdown.rules.ConsistentEmphasisStyleRule
import com.appmattus.markdown.rules.ConsistentUlStyleRule
import com.appmattus.markdown.rules.OlPrefixRule
import com.appmattus.markdown.rules.LineLengthRule
import com.appmattus.markdown.rules.LowerCaseFilenameRule
import com.appmattus.markdown.rules.NoPunctuationFilenameRule
import com.appmattus.markdown.rules.config.EmphasisStyle
import com.appmattus.markdown.rules.config.OrderedListStyle
import com.appmattus.markdown.rules.config.UnorderedListStyle

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'codenarc'
    id 'com.appmattus.markdown' version '0.6.0'
    id 'name.remal.check-dependency-updates' version '1.5.0'
    id 'nebula.lint' version '17.8.0'
    id 'de.obqo.decycle' version '1.1.0'
}

ext {
    junitVersion = '5.10.1'
    codenarcVersion = '3.3.0'
}

repositories {
    mavenCentral()
}

pluginBundle {
    website = 'https://github.com/ivankohut/git-branch-checks'
    vcsUrl = 'https://github.com/ivankohut/git-branch-checks.git'
    tags = ['style', 'git']
}

gradlePlugin {
    plugins {
        gitBranchChecksPlugin {
            id = 'com.github.ivankohut.git-branch-checks'
            displayName = 'Git Branch Checks Plugin'
            description = 'Validation of some properties of current git branch'
            implementationClass = 'com.github.ivankohut.gitbranchchecks.GitBranchChecksPlugin'
        }
    }
}

dependencies {
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.7.0.202309050840-r'
    implementation 'org.cactoos:cactoos:0.55.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

group = 'com.github.ivankohut'
version = '0.0.4'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

codenarc {
    toolVersion codenarcVersion
}

task codenarcGradle(type: CodeNarc) {
    compilationClasspath += buildscript.configurations.classpath
    configFile = file('config/codenarc/codenarc-gradle.groovy')
    source = rootDir
    include '*.gradle', 'config/codenarc/*.groovy'
    ignoreFailures false
    maxPriority1Violations 0
    maxPriority2Violations 0
    maxPriority3Violations 0
}

check {
    dependsOn codenarcGradle
}

markdownlint.with {
    includes = ['\\./[A-Z_]*\\.md']
    rules { rb ->
        rb.with {
            unaryPlus(new ConsistentEmphasisStyleRule(EmphasisStyle.Underscore, { rsb -> }))
            unaryPlus(new ConsistentUlStyleRule(UnorderedListStyle.Asterisk, { rsb -> }))
            unaryPlus(new OlPrefixRule(OrderedListStyle.Ordered, { rsb -> }))

            // Unwanted rules
            unaryPlus(new LineLengthRule(80, false, false, false, '.', { rsb -> rsb.active = false }))
            unaryPlus(new LowerCaseFilenameRule([], { rsb -> rsb.active = false }))
            unaryPlus(new NoPunctuationFilenameRule('any', { rsb -> rsb.active = false }))
        }
    }
}

check {
    dependsOn 'markdownlint'
}
